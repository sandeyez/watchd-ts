/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppSearchRouteImport } from './routes/_app/search'
import { Route as AppHomeRouteImport } from './routes/_app/home'
import { Route as AppMoviesMovieIdRouteImport } from './routes/_app/movies.$movieId'
import { Route as AppMoviesMovieIdIndexRouteImport } from './routes/_app/movies.$movieId/index'
import { Route as AppMoviesMovieIdCastRouteImport } from './routes/_app/movies.$movieId/cast'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRoute,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)
const AppMoviesMovieIdRoute = AppMoviesMovieIdRouteImport.update({
  id: '/movies/$movieId',
  path: '/movies/$movieId',
  getParentRoute: () => AppRoute,
} as any)
const AppMoviesMovieIdIndexRoute = AppMoviesMovieIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppMoviesMovieIdRoute,
} as any)
const AppMoviesMovieIdCastRoute = AppMoviesMovieIdCastRouteImport.update({
  id: '/cast',
  path: '/cast',
  getParentRoute: () => AppMoviesMovieIdRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/movies/$movieId': typeof AppMoviesMovieIdRouteWithChildren
  '/movies/$movieId/cast': typeof AppMoviesMovieIdCastRoute
  '/movies/$movieId/': typeof AppMoviesMovieIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/movies/$movieId/cast': typeof AppMoviesMovieIdCastRoute
  '/movies/$movieId': typeof AppMoviesMovieIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/home': typeof AppHomeRoute
  '/_app/search': typeof AppSearchRoute
  '/_app/movies/$movieId': typeof AppMoviesMovieIdRouteWithChildren
  '/_app/movies/$movieId/cast': typeof AppMoviesMovieIdCastRoute
  '/_app/movies/$movieId/': typeof AppMoviesMovieIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/search'
    | '/movies/$movieId'
    | '/movies/$movieId/cast'
    | '/movies/$movieId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/search' | '/movies/$movieId/cast' | '/movies/$movieId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_app/home'
    | '/_app/search'
    | '/_app/movies/$movieId'
    | '/_app/movies/$movieId/cast'
    | '/_app/movies/$movieId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/home': {
      id: '/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/movies/$movieId': {
      id: '/_app/movies/$movieId'
      path: '/movies/$movieId'
      fullPath: '/movies/$movieId'
      preLoaderRoute: typeof AppMoviesMovieIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/movies/$movieId/': {
      id: '/_app/movies/$movieId/'
      path: '/'
      fullPath: '/movies/$movieId/'
      preLoaderRoute: typeof AppMoviesMovieIdIndexRouteImport
      parentRoute: typeof AppMoviesMovieIdRoute
    }
    '/_app/movies/$movieId/cast': {
      id: '/_app/movies/$movieId/cast'
      path: '/cast'
      fullPath: '/movies/$movieId/cast'
      preLoaderRoute: typeof AppMoviesMovieIdCastRouteImport
      parentRoute: typeof AppMoviesMovieIdRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppMoviesMovieIdRouteChildren {
  AppMoviesMovieIdCastRoute: typeof AppMoviesMovieIdCastRoute
  AppMoviesMovieIdIndexRoute: typeof AppMoviesMovieIdIndexRoute
}

const AppMoviesMovieIdRouteChildren: AppMoviesMovieIdRouteChildren = {
  AppMoviesMovieIdCastRoute: AppMoviesMovieIdCastRoute,
  AppMoviesMovieIdIndexRoute: AppMoviesMovieIdIndexRoute,
}

const AppMoviesMovieIdRouteWithChildren =
  AppMoviesMovieIdRoute._addFileChildren(AppMoviesMovieIdRouteChildren)

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppSearchRoute: typeof AppSearchRoute
  AppMoviesMovieIdRoute: typeof AppMoviesMovieIdRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppSearchRoute: AppSearchRoute,
  AppMoviesMovieIdRoute: AppMoviesMovieIdRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
